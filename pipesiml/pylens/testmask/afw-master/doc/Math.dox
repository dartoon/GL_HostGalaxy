namespace lsst { namespace afw { namespace math {
/**
 \page Math
 */

/**
 \page StatisticsExample Statistics

 \dontinclude statistics.cc

Demonstrate the use of Statistics; the code's in \link statistics.cc\endlink.

Start by including needed headers and declaring namespace aliases
\until namespace math
Create an Image
\until 100000
Create a Statistics object from that Image, requesting the number of points, the mean, and the standard deviation.
\until Statistics
And print the desired quantities.  Note that we didn't request that the error in the mean be calculated,
so a \c NaN is returned.
\until }

Here's another way to do the same thing.  We use \c makeStatistics (cf. \c std::make_pair) to avoid having to
specify what sort of \c Statistics we're creating (and in C++0X you'll be able to say
\code
auto stats = math::makeStatistics(img, math::STDEV | math::MEAN | math::ERRORS);
\endcode
which means that we <em>never</em> have to provide information that the compiler
has up its sleeve --- very convenient for generic template programming)
\until Statistics
Print the answers again, but this time return that value and its error as a \c std::pair
\until }

Don't ask for things that you didn't request.
\until }
\until }
\until }
be tidy and return success (unnecessary; unlike C, C++ will return this 0 for you automatically)
\until }

\example statistics.cc
 */

/**
 \page BackgroundExample Background

 \dontinclude estimateBackground.py

Using the Background class; the code's in \link estimateBackground.py\endlink.

The basic strategy is
 - Measure the properties of the image (e.g. the mean level) -- the Background object
 - Interpolate the Background to provide an estimate of the background
 - Or generate an approximation to the Background, and use that to estimate the background

Start by importing needed packages
\skip import
\until afwMath
Read an Image
\skip def getImage
\until return
\code
image = getImage()
\endcode

We'll do the simplest case first.
Start by creating a BackgroundControl object that's used to configure the algorithm that's
used to estimate the background levels.
\skip def simple
\until bctrl
Estimate the background levels
\until makeBackground

We can ask for the resulting heavily-binned image (but only after casting the base class Background
to one that includes such an image, a BackgroundMI)
\until getStatsImage

or subtract this background estimate from the input image,
interpolating our estimated values using a \c NATURAL_SPLINE
\skipline SPLINE

We actually have a lot more control over the whole process than that.
We'll start by building a StatisticsControl object, and telling it our desires:
\skip sctrl
\until setNanSafe
(actually I could have set most of those options in the ctor)

We then build the BackgroundControl object, passing it \c sctrl and also my desired statistic.
\skipline bctrl

Making the Background is the same as before
\skipline makeBack

We can get the statistics image, and its variance:
\skipline getStats
\skipline mtv

Finally, we can interpolate in a number of ways, e.g.
\skip dict
\until LINEAR

If we wish to use an approximation to the background (instead of interpolating the values) we
proceed slightly differently.  First we need an object to specify our interpolation strategy:
\skip order
\until actrl
and then we can Approximate the Background with (in this case a Chebyshev polynomial)
\until getApprox

We can get an Image or MaskedImage from \c approx with
\until getMaskedImage
or truncate the expansion (as is often a good idea with a Chebyshev expansion); in this case to
order one lower than the original fit.
\until getImage
 */
 
}}}
